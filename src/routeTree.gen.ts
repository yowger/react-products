/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as appProfileImport } from './routes/(app)/profile'
import { Route as productsProductsRouteImport } from './routes/(products)/products.route'
import { Route as productsProductsIndexImport } from './routes/(products)/products.index'
import { Route as productsProductsCreateImport } from './routes/(products)/products.create'
import { Route as productsProductsSlugImport } from './routes/(products)/products.$slug'
import { Route as productsProductsSlugEditImport } from './routes/(products)/products.$slug.edit'

// Create/Update Routes

const appIndexRoute = appIndexImport.update({
  id: '/(app)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appProfileRoute = appProfileImport.update({
  id: '/(app)/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const productsProductsRouteRoute = productsProductsRouteImport.update({
  id: '/(products)/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const productsProductsIndexRoute = productsProductsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => productsProductsRouteRoute,
} as any)

const productsProductsCreateRoute = productsProductsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => productsProductsRouteRoute,
} as any)

const productsProductsSlugRoute = productsProductsSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => productsProductsRouteRoute,
} as any)

const productsProductsSlugEditRoute = productsProductsSlugEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => productsProductsSlugRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(products)/products': {
      id: '/(products)/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof productsProductsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/profile': {
      id: '/(app)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof rootRoute
    }
    '/(products)/products/$slug': {
      id: '/(products)/products/$slug'
      path: '/$slug'
      fullPath: '/products/$slug'
      preLoaderRoute: typeof productsProductsSlugImport
      parentRoute: typeof productsProductsRouteImport
    }
    '/(products)/products/create': {
      id: '/(products)/products/create'
      path: '/create'
      fullPath: '/products/create'
      preLoaderRoute: typeof productsProductsCreateImport
      parentRoute: typeof productsProductsRouteImport
    }
    '/(products)/products/': {
      id: '/(products)/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof productsProductsIndexImport
      parentRoute: typeof productsProductsRouteImport
    }
    '/(products)/products/$slug/edit': {
      id: '/(products)/products/$slug/edit'
      path: '/edit'
      fullPath: '/products/$slug/edit'
      preLoaderRoute: typeof productsProductsSlugEditImport
      parentRoute: typeof productsProductsSlugImport
    }
  }
}

// Create and export the route tree

interface productsProductsSlugRouteChildren {
  productsProductsSlugEditRoute: typeof productsProductsSlugEditRoute
}

const productsProductsSlugRouteChildren: productsProductsSlugRouteChildren = {
  productsProductsSlugEditRoute: productsProductsSlugEditRoute,
}

const productsProductsSlugRouteWithChildren =
  productsProductsSlugRoute._addFileChildren(productsProductsSlugRouteChildren)

interface productsProductsRouteRouteChildren {
  productsProductsSlugRoute: typeof productsProductsSlugRouteWithChildren
  productsProductsCreateRoute: typeof productsProductsCreateRoute
  productsProductsIndexRoute: typeof productsProductsIndexRoute
}

const productsProductsRouteRouteChildren: productsProductsRouteRouteChildren = {
  productsProductsSlugRoute: productsProductsSlugRouteWithChildren,
  productsProductsCreateRoute: productsProductsCreateRoute,
  productsProductsIndexRoute: productsProductsIndexRoute,
}

const productsProductsRouteRouteWithChildren =
  productsProductsRouteRoute._addFileChildren(
    productsProductsRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/products': typeof productsProductsRouteRouteWithChildren
  '/profile': typeof appProfileRoute
  '/': typeof appIndexRoute
  '/products/$slug': typeof productsProductsSlugRouteWithChildren
  '/products/create': typeof productsProductsCreateRoute
  '/products/': typeof productsProductsIndexRoute
  '/products/$slug/edit': typeof productsProductsSlugEditRoute
}

export interface FileRoutesByTo {
  '/profile': typeof appProfileRoute
  '/': typeof appIndexRoute
  '/products/$slug': typeof productsProductsSlugRouteWithChildren
  '/products/create': typeof productsProductsCreateRoute
  '/products': typeof productsProductsIndexRoute
  '/products/$slug/edit': typeof productsProductsSlugEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(products)/products': typeof productsProductsRouteRouteWithChildren
  '/(app)/profile': typeof appProfileRoute
  '/(app)/': typeof appIndexRoute
  '/(products)/products/$slug': typeof productsProductsSlugRouteWithChildren
  '/(products)/products/create': typeof productsProductsCreateRoute
  '/(products)/products/': typeof productsProductsIndexRoute
  '/(products)/products/$slug/edit': typeof productsProductsSlugEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/products'
    | '/profile'
    | '/'
    | '/products/$slug'
    | '/products/create'
    | '/products/'
    | '/products/$slug/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/profile'
    | '/'
    | '/products/$slug'
    | '/products/create'
    | '/products'
    | '/products/$slug/edit'
  id:
    | '__root__'
    | '/(products)/products'
    | '/(app)/profile'
    | '/(app)/'
    | '/(products)/products/$slug'
    | '/(products)/products/create'
    | '/(products)/products/'
    | '/(products)/products/$slug/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  productsProductsRouteRoute: typeof productsProductsRouteRouteWithChildren
  appProfileRoute: typeof appProfileRoute
  appIndexRoute: typeof appIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  productsProductsRouteRoute: productsProductsRouteRouteWithChildren,
  appProfileRoute: appProfileRoute,
  appIndexRoute: appIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(products)/products",
        "/(app)/profile",
        "/(app)/"
      ]
    },
    "/(products)/products": {
      "filePath": "(products)/products.route.tsx",
      "children": [
        "/(products)/products/$slug",
        "/(products)/products/create",
        "/(products)/products/"
      ]
    },
    "/(app)/profile": {
      "filePath": "(app)/profile.tsx"
    },
    "/(app)/": {
      "filePath": "(app)/index.tsx"
    },
    "/(products)/products/$slug": {
      "filePath": "(products)/products.$slug.tsx",
      "parent": "/(products)/products",
      "children": [
        "/(products)/products/$slug/edit"
      ]
    },
    "/(products)/products/create": {
      "filePath": "(products)/products.create.tsx",
      "parent": "/(products)/products"
    },
    "/(products)/products/": {
      "filePath": "(products)/products.index.tsx",
      "parent": "/(products)/products"
    },
    "/(products)/products/$slug/edit": {
      "filePath": "(products)/products.$slug.edit.tsx",
      "parent": "/(products)/products/$slug"
    }
  }
}
ROUTE_MANIFEST_END */
